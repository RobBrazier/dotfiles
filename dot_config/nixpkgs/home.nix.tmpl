{ config, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = "{{ .chezmoi.username }}";
  home.homeDirectory = "{{ .chezmoi.homeDir }}";
  
  nixpkgs.config.allowUnfree = true;

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "22.05";

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  home.packages = [
    # System Utils
    pkgs.btop
    pkgs.git
    pkgs.curl
    pkgs.direnv
    pkgs.silver-searcher
    pkgs.ripgrep
    pkgs.fd
    # Languages
    ## NodeJS
    pkgs.nodejs-16_x
    pkgs.nodePackages.pnpm
    ## Python
    pkgs.python39
    pkgs.python39Packages.pipx
    pkgs.poetry
    pkgs.pipenv
    ## PHP
    pkgs.php81
    pkgs.php81Packages.composer
    ## Rust
    pkgs.rustup
    # Fonts
    pkgs.nerdfonts
    # Applications
    pkgs.discord
  ];

  # Manage Fonts
  fonts.fontconfig.enable = true;

  # Desktop Icons
  xdg.enable = true;
  xdg.mime.enable = true;
  targets.genericLinux.enable = true;

  home.activation = {
    linkDesktopApplications = {
      after = [ "writeBoundary" "createXdgUserDirectories" ];
      before = [ ];
      data = ''
        rm -rf ${config.xdg.dataHome}/"applications/home-manager"
        mkdir -p ${config.xdg.dataHome}/"applications/home-manager"
        cp -Lr ${config.home.homeDirectory}/.nix-profile/share/applications/* ${config.xdg.dataHome}/"applications/home-manager/"
      '';
    };
  };

  # Applications
  programs.jq.enable = true;
  programs.topgrade.enable = true;

  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;
    extraConfig = ''
      source ${config.xdg.configHome}/nvim/config.vim
    '';
    plugins = with pkgs.vimPlugins; [
      telescope-nvim
      barbar-nvim
      (nvim-treesitter.withPlugins (
        plugins: with plugins; [
          tree-sitter-nix
          tree-sitter-python
        ]
      ))
      nvim-web-devicons
      lualine-nvim
    ];
  };

  {{ if ne .chezmoi.hostname "Tet" }}
  programs.vscode = {
    enable = true;
    # package = pkgs.vscodium;
  };
  {{ end }}

  programs.fish = {
    enable = true;
    shellAliases = {
      vim = "nvim";
      wget = "wget --hsts-file=\"$XDG_DATA_HOME/wget-hsts\"";
      #code = "codium";
    };
    plugins = [
      {
        name = "foreign-env";
        src = pkgs.fetchFromGitHub {
            owner = "oh-my-fish";
            repo = "plugin-foreign-env";
            rev = "b3dd471bcc885b597c3922e4de836e06415e52dd";
            sha256 = "3h03WQrBZmTXZLkQh1oVyhv6zlyYsSDS7HTHr+7WjY8=";
        };
      }
      {
        name = "bobthefish";
        src = pkgs.fetchFromGitHub {
            owner = "oh-my-fish";
            repo = "theme-bobthefish";
            rev = "2dcfcab653ae69ae95ab57217fe64c97ae05d8de";
            sha256 = "jBbm0wTNZ7jSoGFxRkTz96QHpc5ViAw9RGsRBkCQEIU=";
        };
      }
      {
        name = "bang-bang";
        src = pkgs.fetchFromGitHub {
            owner = "oh-my-fish";
            repo = "plugin-bang-bang";
            rev = "f969c618301163273d0a03d002614d9a81952c1e";
            sha256 = "A8ydBX4LORk+nutjHurqNNWFmW6LIiBPQcxS3x4nbeQ=";
        };
      }
    ];
  };
}
